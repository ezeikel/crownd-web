# import * from './generated/prisma.graphql'

# this is needed for upload to work
scalar Upload
scalar Date

type SuccessMessage {
  message: String
}

type Post {
  id: ID!
  caption: String
  content: Content!
  author: User!
  likes: [Like!]!
  comments: [Comment!]!
  createdAt: Date!
}

type User {
  id: ID!
  name: String!
  username: String!
  profilePicture: Content
  website: String
  bio: String
  email: String!
  phoneNumber: Int
  gender: Gender!
  following: [User!]!
  followers: [User!]!
  verified: Boolean
  posts: [Post!]!
  likes: [Like!]!
  comments: [Comment!]!
  permissions: [Permission!]!
}

type Query {
  currentUser: User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, first: Int ): [User!]!
  userz: [User!]! # Just for testing
  user(id: ID!): User
  following(id: ID!): [User!]!
  followers(id: ID!): [User!]!
  posts: [Post!]!
  post(id: ID!): Post
  feed(id: ID!): [Post!]!
  explore(id: ID!): [Post!]!
  likedPosts(id: ID!): [Post!]!
  uploads: [File]
}

type Mutation {
  signup(name: String!, username: String!, email: String!, password: String!): User!
  signin(username: String!, password: String!): User!
  signout: SuccessMessage
  follow(id: ID!): User!
  unfollow(id: ID!): User!
  createPost(file: Upload!, caption: String): Post!
  # singleUpload (file: Upload!): File!
  # multipleUpload (files: [Upload!]!): [File!]!
  deletePost(id: ID!, publicId: String!): Post!
  likePost(id: ID!): Like!
  unlikePost(id: ID!): Like!
  addComment(id: ID!, text: String!): Comment!
  deleteComment(id: ID!): Comment!
  updateUser(name: String, username: String, profilePicture: Upload, website: String, bio: String, email: String, phoneNumber: Int, gender: String): User!
}
